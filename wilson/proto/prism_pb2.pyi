"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys
from wilson.proto import properties_pb2

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Prism(google.protobuf.message.Message):
    """Animatible prism in 3D space
    A prism is an extruded regular polygon
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    POSITION_FIELD_NUMBER: builtins.int
    NORMAL_FIELD_NUMBER: builtins.int
    ROTATION_FIELD_NUMBER: builtins.int
    RADIUS_FIELD_NUMBER: builtins.int
    HEIGHT_FIELD_NUMBER: builtins.int
    NVERTICES_FIELD_NUMBER: builtins.int
    COLOR_FIELD_NUMBER: builtins.int
    @property
    def position(self) -> properties_pb2.VectorProperty:
        """position at bottom center"""
    @property
    def normal(self) -> properties_pb2.VectorProperty:
        """vector from bottom center to top center; length is ignored"""
    @property
    def rotation(self) -> properties_pb2.ScalarProperty:
        """rotation angle in radians around normal"""
    @property
    def radius(self) -> properties_pb2.ScalarProperty:
        """Radius"""
    @property
    def height(self) -> properties_pb2.ScalarProperty:
        """Height: Distance between top and bottom"""
    nVertices: builtins.int
    """number of vertices in polygon"""
    @property
    def color(self) -> properties_pb2.ColorProperty:
        """Color"""
    def __init__(
        self,
        *,
        position: properties_pb2.VectorProperty | None = ...,
        normal: properties_pb2.VectorProperty | None = ...,
        rotation: properties_pb2.ScalarProperty | None = ...,
        radius: properties_pb2.ScalarProperty | None = ...,
        height: properties_pb2.ScalarProperty | None = ...,
        nVertices: builtins.int = ...,
        color: properties_pb2.ColorProperty | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["color", b"color", "height", b"height", "normal", b"normal", "position", b"position", "radius", b"radius", "rotation", b"rotation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["color", b"color", "height", b"height", "nVertices", b"nVertices", "normal", b"normal", "position", b"position", "radius", b"radius", "rotation", b"rotation"]) -> None: ...

global___Prism = Prism
