"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys
from wilson.proto import color_pb2, vector_pb2

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class ScalarProperty(google.protobuf.message.Message):
    """Animatible scalar property"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONSTVALUE_FIELD_NUMBER: builtins.int
    GRAPHID_FIELD_NUMBER: builtins.int
    constValue: builtins.float
    """Constant value"""
    graphId: builtins.int
    """Animation according to graph referenced by its id"""
    def __init__(
        self,
        *,
        constValue: builtins.float = ...,
        graphId: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["constValue", b"constValue", "graphId", b"graphId", "source", b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["constValue", b"constValue", "graphId", b"graphId", "source", b"source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source", b"source"]) -> typing_extensions.Literal["constValue", "graphId"] | None: ...

global___ScalarProperty = ScalarProperty

@typing_extensions.final
class VectorProperty(google.protobuf.message.Message):
    """Animatible vector property"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONSTVALUE_FIELD_NUMBER: builtins.int
    PATHID_FIELD_NUMBER: builtins.int
    @property
    def constValue(self) -> vector_pb2.Vector:
        """Constant value"""
    pathId: builtins.int
    """Animation according to path referenced by its id"""
    def __init__(
        self,
        *,
        constValue: vector_pb2.Vector | None = ...,
        pathId: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["constValue", b"constValue", "pathId", b"pathId", "source", b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["constValue", b"constValue", "pathId", b"pathId", "source", b"source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source", b"source"]) -> typing_extensions.Literal["constValue", "pathId"] | None: ...

global___VectorProperty = VectorProperty

@typing_extensions.final
class ColorProperty(google.protobuf.message.Message):
    """Animatible color property"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONSTVALUE_FIELD_NUMBER: builtins.int
    GRAPHID_FIELD_NUMBER: builtins.int
    SCALARVALUE_FIELD_NUMBER: builtins.int
    @property
    def constValue(self) -> color_pb2.Color:
        """Constant color"""
    graphId: builtins.int
    """Animatible color according graph referenced by its id
    The scalar value from graph is translated according to a color map
    """
    scalarValue: builtins.float
    """A scalar translated by the color map into an actual color"""
    def __init__(
        self,
        *,
        constValue: color_pb2.Color | None = ...,
        graphId: builtins.int = ...,
        scalarValue: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["constValue", b"constValue", "graphId", b"graphId", "scalarValue", b"scalarValue", "source", b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["constValue", b"constValue", "graphId", b"graphId", "scalarValue", b"scalarValue", "source", b"source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source", b"source"]) -> typing_extensions.Literal["constValue", "graphId", "scalarValue"] | None: ...

global___ColorProperty = ColorProperty
